close all; clear all; clc;
addpath(genpath('/home/nkapania/xavier/common'))

%% 
%Load parameters
veh = getVehicle('linear','closest');
Cf = veh.Cf;
Cr = veh.Cr;
a = veh.a;
b = veh.b;
Iz = veh.Iz;
kp = veh.kLK;
L = veh.L;
xLA = veh.xLA;
m = veh.m;
Ux = 20;
Kug = veh.FzF/Cf - veh.FzR/Cr;
g = 9.81;
Gffw = (L+Kug*Ux^2/g);

%define state matrices A, B, C - constant speed with x = [e, deltaPsi, r,
%beta]

%% LK controller - simulate with lsim

A = [0 Ux 0 Ux; 0 0 1 0; -a*kp*Cf/Iz -a*kp*xLA*Cf/Iz -(a^2*Cf + b^2*Cr)/(Ux*Iz) (b*Cr - a*Cf)/Iz; -kp*Cf/(m*Ux) -kp*xLA*Cf/(m*Ux) (b*Cr-a*Cf)/(m*Ux^2)-1 -(Cf+Cr)/(m*Ux)];
B = [0 -Ux a*Cf*Gffw/Iz Cf*Gffw/(m*Ux)]';
C = [1 0 0 0];
D = 0;

sys = ss(A, B, C, D);

tMax = 5;
t = linspace(0, tMax, 1000);
u = zeros(size(t));
x0 = [2; 0; 0; 0];

[y,t,x] = lsim(sys, u, t, x0);

plot(t, y);
xlabel('time (s)');
ylabel('Lateral Error e (m)')
legend('Lanekeeping')

figure; 
plot(t, x(:,2)*180/pi);
xlabel('time (s)');
ylabel('Heading Error (deg)')
legend('Lanekeeping')

figure; 
plot(t, x(:,3)*180/pi);
xlabel('time (s)');
ylabel('Yaw Rate (deg/s)')
legend('Lanekeeping')

figure; 
plot(t, x(:,4)*180/pi);
xlabel('time (s)');
ylabel('Sideslip (deg)')
legend('Lanekeeping')

%% LQR



%% MPC unconstrained



%% MPC constrained



